name: Deploy
on:
  workflow_call:
    inputs:
      # update_simbioz:
      #   required: true
      #   type: boolean
      base_update:
        required: false
        type: boolean
      SERVER_ADDR:
        required: true
        type: string
      SERVER_USER:
        required: true
        type: string
      SERVER_PORT:
        required: true
        type: string
      PROJECT_PATH:
        required: true
        type: string
      ODOO_SERVICE:
        required: true
        type: string
      ODOO_USER:
        required: true
        type: string
      ODOO_URI:
        required: true
        type: string
      ODOO_DB:
        required: true
        type: string
    secrets:
      SSH_KEY:
        required: true
      ODOO_PASSWORD:
        required: true
env:
  MAIN_PATH: ${{inputs.PROJECT_PATH}}
  ODOO_CONFIG: ${{inputs.PROJECT_PATH}}/config_local/odoo-server.conf
  ODOO_DB: ${{inputs.ODOO_DB}}
  SERVER_USER: ${{inputs.SERVER_USER}}

jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - name: Check variables
        run: |
          echo "=== CHECKING INPUTS ==="
          if [[ -z "${{inputs.SERVER_ADDR}}" ]]; then
            echo "SERVER_ADDR is not set"
            exit 100
          fi
          if [[ -z "${{inputs.SERVER_USER}}" ]]; then
            echo "SERVER_USER is not set"
            exit 100
          fi
          if [[ -z "${{inputs.PROJECT_PATH}}" ]]; then
            echo "PROJECT_PATH is not set"
            exit 100
          fi
          if [[ -z "${{inputs.ODOO_SERVICE}}" ]]; then
            echo "ODOO_SERVICE is not set"
            exit 100
          fi
          if [[ -z "${{inputs.ODOO_USER}}" ]]; then
            echo "ODOO_USER is not set"
            exit 100
          fi
          if [[ -z "${{inputs.ODOO_URI}}" ]]; then
            echo "ODOO_URI is not set"
            exit 100
          fi
          if [[ -z "${{inputs.ODOO_DB}}" ]]; then
            echo "ODOO_DB is not set"
            exit 100
          fi
          echo "=== END CHECKING INPUTS ==="
      - name: Create SSH
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{secrets.SSH_KEY}}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{inputs.SERVER_ADDR}} > ~/.ssh/known_hosts
          cat >~/.ssh/config <<EOF
          Host deploy
            HostName ${{inputs.SERVER_ADDR}}
            User $SERVER_USER
            Port ${{inputs.SERVER_PORT}}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
          EOF
          ssh -T deploy > /dev/null
      # - name: Update repository
      #   run: |
      #     cat >~/update_script.sh <<EOF
      #     #!/bin/bash
      #     if [[ -d $MAIN_PATH ]]; then
      #       cd $MAIN_PATH
      #       git submodule foreach --recursive git config --local --replace-all safe.directory '*'
      #       git submodule foreach --recursive git checkout main
      #       git fetch --all
      #       git pull
      #       git submodule foreach --recursive git reset --hard
      #       git submodule sync --recursive
      #       git submodule update --init --recursive
      #       git submodule foreach --recursive 'git fetch origin --tags && git checkout $(git config -f $toplevel/.gitmodules submodule.$name.branch || echo "main") && git pull'
      #       sh odoo_set_icons.sh 2>/dev/null || true
      #     else
      #       echo "No folder $MAIN_PATH"
      #       exit 100
      #     fi
      #     EOF
      #     ssh -o TCPKeepAlive=yes -o ServerAliveCountMax=30 -o ServerAliveInterval=60 deploy bash < ~/update_script.sh
      - name: Soft update (only changes)s
        if: ${{!inputs.base_update}}
        run: |
          echo "=== GET DATABASE LIST ==="
          # ssh deploy "sudo systemctl restart ${{inputs.ODOO_SERVICE}} && sleep 10"
          if [[ $ODOO_DB == -* ]]; then
            DB_RESULT=$(ssh deploy "sudo -u $SERVER_USER bash -c 'source $MAIN_PATH/venv/bin/activate && click-odoo-listdb -c \"$ODOO_CONFIG\"'")
          else
            DB_RESULT=$ODOO_DB
          fi
          echo "=== DATABASES ==="
          echo "$DB_RESULT"
          for db in $DB_RESULT; do
            echo "=== UPDATING DATABASE $db ==="
            cat >~/update_script.sh <<EOF
            #!/bin/bash
            sudo -u $SERVER_USER bash -c "source $MAIN_PATH/venv/bin/activate && click-odoo-update -c '$ODOO_CONFIG' -d '$db' --watcher-max-seconds 0 --log-level info"
            EOF
            # ssh deploy bash < ~/update_script.sh
          done
      #     cat <<EOF >> ~/update_script.sh
      #     echo "=== UPDATING ODOO ==="
      #     sudo systemctl restart ${{inputs.ODOO_SERVICE}}
      #     sleep 10
      #     # TEST
      #     DB_RESULT=$(sudo -u ${{inputs.SERVER_USER}} bash -c "source $MAIN_PATH/venv/bin/activate && $SHELL -c 'click-odoo-listdb -c \"$ODOO_CONFIG\"'")
      #     # Обновление каждой базы данных из списка
      #     for db in $DATABASES; do
      #         echo "$db"
      #     done
      #     exit 100
      #     # sudo -u ${{inputs.SERVER_USER}} bash -c "source $MAIN_PATH/venv/bin/activate && exec \"$SHELL\" -c \"click-odoo-update -c '$ODOO_CONFIG' -d '$ODOO_DB' --watcher-max-seconds 0 --log-level info\""
      #     EOF
      #     echo "=== START PRINT SCRIPT ==="
      #     cat ~/update_script.sh
      #     echo "=== END PRINT SCRIPT ==="
      #     if [[ ! -z "${{inputs.SERVER_PORT}}" ]]; then
      #       ssh -o TCPKeepAlive=yes -o ServerAliveCountMax=30 -o ServerAliveInterval=60 -p ${{inputs.SERVER_PORT}} ${{inputs.SERVER_USER}}@${{inputs.SERVER_ADDR}} bash < ~/update_script.sh
      #     else
      #       ssh -o TCPKeepAlive=yes -o ServerAliveCountMax=30 -o ServerAliveInterval=60 ${{inputs.SERVER_USER}}@${{inputs.SERVER_ADDR}} bash < ~/update_script.sh
      #     fi
      # - name: Hard update (base module)
      #   if: ${{inputs.base_update}}
      #   run: |
      #     cat <<EOF >> ~/update_script.sh
      #     echo "=== STOPPING ODOO ==="
      #     sudo systemctl stop ${{inputs.ODOO_SERVICE}}
      #     sleep 10
      #     echo "=== UPDATING ODOO ==="
      #     cd $MAIN_PATH
      #     sudo -u ${{inputs.SERVER_USER}} bash -c "$MAIN_PATH/venv/bin/python3 $MAIN_PATH/odoo-bin -c $ODOO_CONFIG -d $ODOO_DB -u base --logfile= --log-level=error --stop-after-init"
      #     echo "=== STARTING ODOO ==="
      #     sudo systemctl start ${{inputs.ODOO_SERVICE}}
      #     sleep 10
      #     echo "=== SHOW STATUS ODOO ==="
      #     sudo systemctl status ${{inputs.ODOO_SERVICE}}
      #     EOF
      #     cat ~/update_script.sh
      #     if [[ ! -z "${{inputs.SERVER_PORT}}" ]]; then
      #       ssh -o TCPKeepAlive=yes -o ServerAliveCountMax=100 -o ServerAliveInterval=60 -p ${{inputs.SERVER_PORT}} ${{inputs.SERVER_USER}}@${{inputs.SERVER_ADDR}} bash < ~/update_script.sh
      #     else
      #       ssh -o TCPKeepAlive=yes -o ServerAliveCountMax=100 -o ServerAliveInterval=60 ${{inputs.SERVER_USER}}@${{inputs.SERVER_ADDR}} bash < ~/update_script.sh
      #     fi
